# Runtime: 1952 ms, faster than 39.04% of Python3 online submissions for Minimize Malware Spread.
# Memory Usage: 16.4 MB, less than 75.00% of Python3 online submissions for Minimize Malware Spread.
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # init
        n = len(graph)
        self.parents = list(range(n))
        # union
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    self.union(i, j)
        area = collections.Counter(self.find(i) for i in range(n))
        malware = collections.Counter(self.find(i) for i in initial)
        save = 0
        result = min(initial)
        for i in initial:
            if malware[self.find(i)] == 1:
                if area[self.find(i)] > save:
                    save = area[self.find(i)]
                    result = i
                elif area[self.find(i)] == save:
                    result = min(result, i)
        return result

    def find(self, x):
        if x != self.parents[x]:
            self.parents[x] = self.find(self.parents[x])
        return self.parents[x]

    def union(self, x, y):
        self.parents[self.find(x)] = self.find(y)
